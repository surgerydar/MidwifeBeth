mixin textBlockEditor( data ) 
    #scrolling-container( style= 'min-height: 50vh;' )
        div#block-content( style= 'color: black; background-color: white;' data-method= 'put' data-url= '/blocks/' + data._id) !{data.content}
    script.
        //
        // add custom link handling
        //
        let Link = window.Quill.import('formats/link');
        class LocalLink extends Link {
            static sanitize(url) {
                if ( url.startsWith('link://') ) {
                    return url;
                }
                return super.sanitize(url);
            }
        }
        Quill.register(LocalLink);
        //
        //
        //
        let toolbarOptions = [
          ['bold', 'italic', 'underline', 'strike'],
          ['link'],
          [{ 'list': 'bullet' }],
          [{ 'indent': '-1'}, { 'indent': '+1' }],

          [{ 'size': ['small', false, 'large', 'huge'] }],
          [{ 'header': [1, 2, 3, false] }],

          [{ 'align': [] }],

          ['clean']
        ];
        let quill = new Quill('#block-content', {
          modules: {
            toolbar: toolbarOptions
          },
          bounds: '#scrolling-container',
          scrollingContainer: '#scrolling-container', 
          placeholder: 'Compose page content...',
          theme: 'snow'
        }); 
        quill.on( 'text-change', () => {
            let blockContent = document.querySelector('#block-content');
            if ( blockContent ) {
                let method = blockContent.getAttribute('data-method');
                let url = blockContent.getAttribute('data-url');
                if ( url && method ) {
                    let payload = {
                        content: quill.container.firstChild.innerHTML
                    };
                    performAction( method, url, payload, true );
                }
            }
            
        });
        //
        // hook quill tooltip
        //
        let tooltip = document.querySelector('.ql-tooltip');
        if ( tooltip ) {
            console.log( 'hooking tooltip');
            let textInput = tooltip.querySelector('input[type=text]');
            if ( textInput ) {
                
                //
                // add page link list
                //
                let pageLinks = document.createElement('div');
                pageLinks.classList.add('.links-list');
                tooltip.appendChild(pageLinks);
                
                let appendLink = (page)=>{
                    let linkItem = document.createElement('div');
                    linkItem.classList.add( 'page-links-list-item' );
                    linkItem.innerHTML = page.title;
                    linkItem.addEventListener( 'click', (e) => {
                        console.log('selected : ' + page.title );
                        textInput.value = 'link://pages/' + page._id;
                        pageLinks.innerHTML = '';
                    });
                    pageLinks.appendChild( linkItem );
                };
               
                fetch( '/pages?format=json' ).then( (response) => {
                    response.json().then((pages) => {
                        if ( pages ) {
                            textInput.addEventListener('input',()=>{
                                let input = textInput.value.toLowerCase();
                                pageLinks.innerHTML = '';
                                pages.forEach( (page) => {
                                    if ( page.title.toLowerCase().startsWith(input) ) {
                                        appendLink( page );      
                                    }
                                });
                            });
                        }
                    }).catch( (error) => {
                        console.error( 'ERROR: parsing pages : ' + error );
                    });
                }).catch( (error) => {
                    console.error( 'ERROR: fetching pages : ' + error );
                });  
            }
        }
mixin imageBlockEditor( data )
    .block-editor-header
        input#upload( type= 'file' name= 'upload' accept='image/png, image/jpeg' data-target= '#block-content' )
    img.block#block-content( src= data.content data-method= 'put' data-url= '/blocks/' + data._id )
mixin videoBlockEditor( data )
    .block-editor-header
        input#upload( type= 'file' name= 'upload' accept='video/*' data-target= '#block-content' )
    video.block#block-content( src= data.content controls data-method= 'put' data-url= '/blocks/' + data._id )
mixin linkBlockEditor( data )
    .block-editor-header
        input#block-title( type= 'text' placeholder= 'block title ( optional )' style= 'flex: 1 1 auto; margin-right: 16px;' value= data.title )
        span New Link
        input#link-title( type= 'text' placeholder= 'link title' )
        input#link-url( type= 'text' placeholder= 'link url' )
        #add-link( class= 'addbutton white' )
    - var links = data.content || '[]';
    .links-list
    .block-link-editor( data-links= links data-method= 'put' data-url= '/blocks/' + data._id )
    h3 Pages
    .page-links-list
    script.
        // TODO: move this to external file
        const linkEditor = document.querySelector( '.block-link-editor' );
        let links = JSON.parse(linkEditor.getAttribute('data-links'));
        const saveChanges = () => {
            const method = linkEditor.getAttribute('data-method');
            const url = linkEditor.getAttribute('data-url');
            if ( method && url ) {
                let payload = {
                    content: JSON.stringify(links)
                };
                performAction( method, url, payload, true );
            }
        };
        const updateLinks = () => {
            //
            // regenerate indicies
            //
            for ( let index = 0; index < links.length; index++ ) {
                links[ index ].index = index;
            }
            linkEditor.innerHTML = '';
            links.forEach( (link) => {
                //
                // TODO: render from template using pug
                //
                let linkBlock = document.createElement('div');
                //
                //
                //
                let linkBlockDelete = document.createElement('div');
                linkBlockDelete.classList.add('deletebutton');
                linkBlockDelete.classList.add('white');
                linkBlockDelete.style.float = 'right';
                linkBlockDelete.style.margins = '8px';
                linkBlockDelete.addEventListener('click', (e) => {
                    links.splice(link.index, 1); 
                    updateLinks();
                });
                linkBlock.appendChild(linkBlockDelete);
                //
                //
                //
                let linkBlockLabel = document.createElement('h3');
                linkBlockLabel.innerHTML = link.title;
                linkBlock.appendChild(linkBlockLabel);
                //
                //
                //
                let setIndex = (newIndex) => {
                    //
                    // move link in array
                    //
                    links.splice(newIndex, 0, links.splice(link.index, 1)[0]);
                    updateLinks();
                    saveChanges();
                };
                //
                //
                //
                let moveLeft = document.createElement('div');
                moveLeft.classList.add('previousbutton');
                moveLeft.classList.add('white');
                moveLeft.style.display = 'inline-block';
                moveLeft.addEventListener('click',(e) => {
                    if ( link.index > 0 ) {
                        setIndex(link.index - 1);
                    }
                });
                linkBlock.appendChild(moveLeft);
                //
                //
                //
                let linkBlockTitle = document.createElement('input');
                linkBlockTitle.id = 'block-title-' + link.index;
                linkBlockTitle.type = 'text';
                linkBlockTitle.value = link.title;
                linkBlockTitle.addEventListener( 'input', (e) => {
                    linkBlockLabel.innerHTML = linkBlockTitle.value;
                    links[ link.index ].title = linkBlockTitle.value;
                    filterLinks( linkBlockTitle.value.toLowerCase(), (title, url) => {
                        linkBlockLabel.innerHTML = title;
                        linkBlockTitle.value = title;
                        linkBlockUrl.value = url;
                        links[ link.index ].title = title;
                        links[ link.index ].url = url;
                        saveChanges();
                    });
                    linksList.style.visibility = 'visible';
                    saveChanges();
                });
                linkBlockTitle.addEventListener('focus', (e) => {
                    filterLinks( linkBlockTitle.value.toLowerCase(), (title, url) => {
                        linkBlockLabel.innerHTML = title;
                        linkBlockTitle.value = title;
                        linkBlockUrl.value = url;
                        links[ link.index ].title = title;
                        links[ link.index ].url = url;
                        saveChanges();
                    });
                    linksList.style.visibility = 'visible';
                });
                linkBlock.appendChild(linkBlockTitle);
                //
                //
                //
                let linkBlockUrl = document.createElement('input');
                linkBlockUrl.id = 'block-url-' + link.index;
                linkBlockUrl.type = 'text';
                linkBlockUrl.setAttribute('readonly', true);
                linkBlockUrl.value = link.url;
                linkBlockUrl.addEventListener( 'click', (e) => {
                     filterLinks( linkBlockTitle.value.toLowerCase(), (title, url) => {
                        linkBlockTitle.value = title;
                        linkBlockUrl.value = url;
                        links[ link.index ].title = title;
                        links[ link.index ].url = url;
                        saveChanges();
                    });
                    linksList.style.visibility = 'visible';
                });
                linkBlock.appendChild(linkBlockUrl);
                //
                //
                //
                /*
                let linkBlockIndex = document.createElement('input');
                linkBlockIndex.id = 'block-index-' + link.index;
                linkBlockIndex.type = 'number';
                linkBlockIndex.value = link.index;
                linkBlockIndex.addEventListener('input', (e) => {
                    let newIndex = Math.max(0,Math.min( links.length, parseInt(linkBlockIndex.value) ) );
                    //
                    // move link in array
                    //
                    links.splice(newIndex, 0, links.splice(link.index, 1)[0]);
                    updateLinks();
                    saveChanges();
                });
                linkBlock.appendChild(linkBlockIndex);
                */
                let moveRight = document.createElement('div');
                moveRight.classList.add('nextbutton');
                moveRight.classList.add('white');
                moveRight.style.display = 'inline-block';
                moveRight.addEventListener('click',(e) => {
                    if ( link.index < links.length - 1 ) {
                        setIndex(link.index + 1);
                    }
                });
                linkBlock.appendChild(moveRight);
                //
                //
                //
                linkEditor.appendChild(linkBlock);
            });
        };
        //
        //
        //
        updateLinks();
        //
        //
        //
        const blockTitle = document.querySelector('#block-title');
        if ( blockTitle ) {
            blockTitle.addEventListener('input', (e)=> {
                const method = linkEditor.getAttribute('data-method');
                const url = linkEditor.getAttribute('data-url');
                if ( method && url ) {
                    let payload = {
                        title: blockTitle.value
                    };
                    performAction( method, url, payload, true );
                }
            });    
        }
        //
        //
        //
        const addLink   = document.querySelector('#add-link');
        const linkTitle = document.querySelector('#link-title');
        const linkUrl   = document.querySelector('#link-url');
        addLink.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('addLink : ' + linkTitle.value + ' : ' + linkUrl.value );
            if ( linkTitle.value && linkUrl.value ) {
                links.push({
                    title:  linkTitle.value,
                    url:    linkUrl.value,
                    index:  links.length
                }); 
                updateLinks();
                saveChanges();
            }
            return true;
        });
        //
        //
        //
        let filterLinks = ( filter, saveCallback ) => {
            console.log( 'filtering links : ' + filter );
            linksList.innerHTML = '';
            if ( filter ) {
                let appendLink = ( type, item ) => {
                    let linkItem = document.createElement('div');
                    linkItem.classList.add( 'links-list-item' );
                    linkItem.innerHTML = item.title + ' (' + type + ')';
                    linkItem.addEventListener( 'click', (e) => {
                        console.log('selected : ' + item.title );
                        if ( saveCallback ) {
                            saveCallback( item.title, 'link://' + type + '/' + item._id );
                        }
                        linksList.style.visibility = 'collapse';
                    });
                    linksList.appendChild( linkItem );
                };
                fetch( '/pages?format=json' ).then( (response) => {
                    console.log( 'got pages : ' + response );
                    response.json().then((pages) => {
                        if ( pages ) {
                            console.log( 'PAGES' );
                            pages.forEach( (page) => {
                                if ( page.title.toLowerCase().startsWith(filter) ) {
                                    appendLink( 'pages', page );           
                                }
                            });
                        }
                    }).catch( (error) => {
                        console.error( 'ERROR: parsing pages : ' + error );
                    });
                }).catch( (error) => {
                    console.error( 'ERROR: fetching pages : ' + error );
                });
                fetch( '/sections?format=json' ).then( (response) => {
                    console.log( 'got sections : ' + response );
                    response.json().then((sections) => {
                        if ( sections ) {
                            console.log( 'SECTIONS' );
                            sections.forEach( (section) => {
                                if ( section.title.toLowerCase().startsWith(filter) ) {
                                    appendLink( 'sections', section );           
                                }
                            });
                        }
                    }).catch( (error) => {
                        console.error( 'ERROR: fetching sections : ' + error );
                    });
                });
            }
        };
        //
        //
        //
        const linksList = document.querySelector( '.links-list' );
        if ( linksList ) {
            console.log( 'hooking links list');
            //
            //
            //
            linkTitle.addEventListener('focus', (e) => {
                filterLinks( linkTitle.value.toLowerCase(), (title,url) => {
                    linkTitle.value = title;
                    linkUrl.value = url;
                });
                linksList.style.visibility = 'visible';
            });
            linkTitle.addEventListener( 'input', (e) => {
                filterLinks( linkTitle.value.toLowerCase(), (title,url) => {
                    linkTitle.value = title;
                    linkUrl.value = url;
                });
                linksList.style.visibility = 'visible';
            });
            linkUrl.addEventListener('click',(e)=>{
                filterLinks( linkTitle.value.toLowerCase(), (title,url) => {
                    linkTitle.value = title;
                    linkUrl.value = url;
                });
                linksList.style.visibility = 'visible';
            });
        }
        //
        //
        //
        const pageLinkList = document.querySelector('.page-links-list');
        if ( pageLinkList ) {
            console.log( 'populating page links list' );
            let appendPageLink = ( page ) => {
                let linkItem = document.createElement('div');
                linkItem.classList.add( 'page-links-list-item' );
                linkItem.innerHTML = page.title + ' +';
                linkItem.addEventListener( 'click', (e) => {
                    console.log('selected : ' + page.title );
                    links.push({
                        title:  page.title,
                        url:    'link://pages/' + page._id,
                        index:  links.length
                    }); 
                    updateLinks();
                    saveChanges();
                });
                pageLinkList.appendChild( linkItem );
            };
            fetch( '/pages?format=json' ).then( (response) => {
                console.log( 'got pages : ' + response );
                response.json().then((pages) => {
                    if ( pages ) {
                        console.log( 'PAGES' );
                        pages.sort( (a,b) => { return a.title.localeCompare(b.title, 'en', { sensitivity: 'base' }); } );
                        pages.forEach( (page) => {
                            appendPageLink(page);
                        });
                    }
                }).catch( (error) => {
                    console.error( 'ERROR: parsing pages : ' + error );
                });
            }).catch( (error) => {
                console.error( 'ERROR: fetching pages : ' + error );
            });
        }
        
mixin blockEditor( data )
    .block-editor( style= 'min-height: 64px;' )
        if data.type == 'text'
            +textBlockEditor(data)
        else if data.type == 'image'
            +imageBlockEditor(data)
        else if data.type == 'video'
            +videoBlockEditor(data)        
        else if data.type == 'links'
            +linkBlockEditor(data)